name: Deploy to VPS

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.VPS_SSH_KEY }}

      - name: Add SSH Known Hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts

      - name: Prepare Deployment
        env:
          SSH_HOST: ${{ secrets.VPS_HOST }}
          SSH_USERNAME: ${{ secrets.VPS_USERNAME }}
          VPS_PORT: ${{ secrets.VPS_PORT }}
        run: |
          ssh -o ServerAliveInterval=60 -o ServerAliveCountMax=3 -p $VPS_PORT $SSH_USERNAME@$SSH_HOST << 'ENDSSH'
            set -e
            echo "🚀 Starting deployment preparation..."
            
            # Navigate to project directory
            cd /home/sipengaduan
            
            # Fix Git ownership issue
            git config --global --add safe.directory /home/sipengaduan
            
            # Pull latest changes (force pull)
            git fetch --all
            git reset --hard origin/main
            
            echo "✅ Code updated successfully"
          ENDSSH

      - name: Update Environment
        env:
          SSH_HOST: ${{ secrets.VPS_HOST }}
          SSH_USERNAME: ${{ secrets.VPS_USERNAME }}
          VPS_PORT: ${{ secrets.VPS_PORT }}
        run: |
          ssh -o ServerAliveInterval=60 -o ServerAliveCountMax=3 -p $VPS_PORT $SSH_USERNAME@$SSH_HOST << 'ENDSSH'
            set -e
            cd /home/sipengaduan
            
            # Update .env with production values
            echo "${{ secrets.PRODUCTION_ENV }}" > .env
            
            echo "✅ Environment updated successfully"
          ENDSSH

      - name: Build and Deploy Containers
        env:
          SSH_HOST: ${{ secrets.VPS_HOST }}
          SSH_USERNAME: ${{ secrets.VPS_USERNAME }}
          VPS_PORT: ${{ secrets.VPS_PORT }}
        run: |
          ssh -o ServerAliveInterval=60 -o ServerAliveCountMax=3 -p $VPS_PORT $SSH_USERNAME@$SSH_HOST << 'ENDSSH'
            set -e
            cd /home/sipengaduan
            
            echo "🛑 Stopping existing containers..."
            docker compose -f docker-compose.prod.yml down
            
            echo "🧹 Removing old app containers only..."
            docker compose -f docker-compose.prod.yml rm -f
            
            echo "🗑️ Cleaning dangling images only..."
            docker image prune -f
            
            echo "🔨 Building containers with cache..."
            docker compose -f docker-compose.prod.yml build
            
            echo "🚀 Starting containers..."
            docker compose -f docker-compose.prod.yml up -d
            
            echo "✅ Deployment completed"
          ENDSSH

      - name: Setup Laravel Application
        env:
          SSH_HOST: ${{ secrets.VPS_HOST }}
          SSH_USERNAME: ${{ secrets.VPS_USERNAME }}
          VPS_PORT: ${{ secrets.VPS_PORT }}
        run: |
          ssh -o ServerAliveInterval=60 -o ServerAliveCountMax=3 -p $VPS_PORT $SSH_USERNAME@$SSH_HOST << 'ENDSSH'
            set -e
            cd /home/sipengaduan
            
            echo "⏳ Waiting for application container to be ready..."
            until docker exec sipengaduan-app php -v > /dev/null 2>&1; do
              echo "Waiting for app container..."
              sleep 5
            done

            docker exec sipengaduan-app composer install --no-dev --optimize-autoloader
            docker exec sipengaduan-app npm install
            docker exec sipengaduan-app npm run build
            docker exec sipengaduan-app composer dump-autoload 

            echo "🔧 Running Laravel setup commands..."
            
            # Force create storage link and verify
            docker exec sipengaduan-app rm -f /var/www/html/public/storage
            docker exec sipengaduan-app php artisan storage:link --force
            echo "Storage link status:"
            docker exec sipengaduan-app ls -la /var/www/html/public/ | grep storage || echo "Storage link not found"
            docker exec sipengaduan-app ls -la /var/www/html/storage/app/public/ || echo "Storage directory not found"
            
            docker exec sipengaduan-app php artisan optimize:clear
            docker exec sipengaduan-app php artisan optimize
            
            echo "✅ Laravel setup completed"
          ENDSSH

      - name: Set Permissions and Finalize
        env:
          SSH_HOST: ${{ secrets.VPS_HOST }}
          SSH_USERNAME: ${{ secrets.VPS_USERNAME }}
          VPS_PORT: ${{ secrets.VPS_PORT }}
        run: |
          ssh -o ServerAliveInterval=60 -o ServerAliveCountMax=3 -p $VPS_PORT $SSH_USERNAME@$SSH_HOST << 'ENDSSH'
            set -e
            cd /home/sipengaduan
            
            echo "🔐 Setting proper permissions..."
            docker exec sipengaduan-app chown -R www-data:www-data /var/www/html
            docker exec sipengaduan-app chmod -R 777 /var/www/html/storage
            
            echo "🔄 Restarting services..."
            docker compose -f docker-compose.prod.yml restart
            
            echo "✅ Production deployment completed successfully!"
          ENDSSH
